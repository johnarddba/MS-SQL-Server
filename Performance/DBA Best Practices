Use WideWorldImporters;
GO
--Figuring out the best patters of FULLs vs DIFFs on every instance is a losing battle.
--This is especially true in larger environments or when usage pattern change over time.


--SQL Server 2016 SP2+
SELECT allocated_extent_page_count
      ,modified_extent_page_count
FROM sys.dm_db_file_space_usage;


EXEC master.dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'DIFF',   ------------Try a DIFF
@ModificationLevel = 50, -----------But if it is going to be 50%+ of a FULL...
@ChangeBackupType = 'Y';------------Go ahead and just do the FULL



--Taking many log backups can mean a lot of emptyish files.  Not anymore.

--SQL Server 2016 SP2+
SELECT * FROM sys.dm_db_log_stats ( 7 );



--NOTE:  You MUST use both new parameters together.
EXECUTE master.dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'LOG',            ---These parameters are only useful on LOG backups.
@LogSizeSinceLastLogBackup = 3, ---Number of MB of log activity needed to trigger a log backup.  
                                ---Otherwise the DB will be skipped.
@TimeSinceLastLogBackup = 3600; ---How many seconds are allowed before we take one anyway, even if little activity.






--For me, once I told it to take backups more often I was presented with a problem.
--The job took too long. Did I really need to delete aged out DB files 4x per hour?

IF DATEPART(hh, SYSDATETIME()) = 0 AND DATEPART(MINUTE, SYSDATETIME()) < 15
BEGIN
  EXECUTE master.dbo.DatabaseBackup
    @Databases = 'USER_DATABASES',
    @Directory = 'C:\Backup',
    @BackupType = 'LOG',
    @CleanupTime = 168;                  --Delete files over a week old.
    --@LogSizeSinceLastLogBackup = 3,    --Don't want anyone getting skipped this round.
    --@TimeSinceLastLogBackup = 3600; 

END
ELSE
BEGIN
  EXECUTE master.dbo.DatabaseBackup
    @Databases = 'USER_DATABASES',
    @Directory = 'C:\Backup',
    @BackupType = 'LOG',            
    --@CleanupTime = 168,            --Don't waste time deleting files.
    @LogSizeSinceLastLogBackup = 3,  --Do skip DBs that aren't busy.
    @TimeSinceLastLogBackup = 3600;

END;



--Integrity checks

DBCC CHECKDB (WideWorldImporters); --00:14

--Faster, but does less checking
DBCC CHECKDB (WideWorldImporters) WITH PHYSICAL_ONLY; --00:12


--A common job step method to implement.
EXEC master.dbo.DatabaseIntegrityCheck
  @Databases = 'USER_DATABASES',
  @CheckCommands = 'CHECKDB';


EXEC master.dbo.DatabaseIntegrityCheck
  @Databases = 'USER_DATABASES',
  @CheckCommands = 'CHECKDB',
  @PhysicalOnly = 'Y';



--Other ways to verify consistency. 
--NONE OF THESE REPLACES CHECKDB.  THEY WORK WITH CHECKDB.
SELECT name, page_verify_option_desc FROM sys.databases;


ALTER DATABASE [RateImporter] SET PAGE_VERIFY CHECKSUM  WITH NO_WAIT;
--Does not immediately write a checksum to every page.  
--It will take time to build a library of checksums.


--How will I know if a page and its checksum aren't matching?

--Errors 823, 824, and 825
EXEC msdb.dbo.sp_add_alert @name=N'823', 
		@message_id=823, 
		@severity=0, 
		@enabled=1;
GO
EXEC msdb.dbo.sp_add_notification @alert_name=N'823', @operator_name=N'Eric Blinn', @notification_method = 1

--Any time an invalid checksum is encountered, a row will find its way to the suspect_pages table in MSDB.
SELECT * FROM msdb.dbo.suspect_pages;

                                                             ---------********---------
BACKUP DATABASE WideWorldImporters TO DISK = 'C:\Backups\WW.bak' WITH CHECKSUM, COMPRESSION;
                                                             ---------********---------

EXEC master.dbo.DatabaseBackup
@Databases = 'USER_DATABASES',
@Directory = 'C:\Backup',
@BackupType = 'FULL',
@Checksum = 'Y';--  <-----------Not a default.  Maybe it should be.


--Since none of that replaces a DBCC CheckDB without options, what else can you do?
https://www.mssqltips.com/sqlservertip/5879/script-to-run-dbcc-checkdb-on-alternate-sql-server-to-reduce-load-on-primary-server/


--Get the most recent full married to the most recent DIFF
SELECT TOP 1
  FullBackupName = fam.physical_device_name
, DiffBackupName = famDIFF.physical_device_name
, backup_set_id = bset.backup_set_id
FROM   msdb.dbo.backupset bset 
    INNER JOIN
  msdb.dbo.backupmediafamily fam ON bset.media_set_id = fam.media_set_id
    LEFT OUTER JOIN
  msdb.dbo.backupset bsetDIFF ON bset.backup_set_uuid = bsetDIFF.differential_base_guid AND bsetDiff.type = 'I'
    LEFT OUTER JOIN
  msdb.dbo.backupmediafamily famDIFF ON bsetDIFF.media_set_id = famDIFF.media_set_id
WHERE 
  bset.type = 'D'
    AND
  bset.database_name = 'WideWorldImporters'
    AND
  bset.is_copy_only = 0
ORDER BY 
  bset.backup_finish_date DESC
, bsetDIFF.backup_finish_date DESC;


SELECT 
  logical_name
, file_type
, file_size/1024/1024 AS FileSizeMB
FROM 
  msdb.dbo.BackupFile 
WHERE 
    backup_set_id = 3567;


--Armed with this information, restore the DB, and run CheckDB on the restored copy.
--NOTE:  This is considered a production workload so you need a licensed SQL Server.







--Auditing
SELECT d.[name] DBName, sp.[name] OwnerOfDB
FROM sys.databases d
 INNER JOIN sys.server_principals sp ON d.owner_sid = sp.sid;



SELECT sj.[name] DBName, sp.[name] OwnerOfDB
FROM msdb.dbo.sysjobs sj
 INNER JOIN sys.server_principals sp ON sj.owner_sid = sp.sid;


EXEC sp_cycle_errorlog;  

--Now fail some logins and check it out.







EXEC xp_ReadErrorLog
  0          --Current Log
, 1          --SQL Log (2 for Agent)
, N'login failed'       --Search Term for Text column
, NULL       --An "AND" search term
, '9/5/2023' --Start Time
, NULL       --End Time
, 'DESC';    --Sort order.  Also allows 'ASC'


--Log failed logins setting



--Who are all these sysadmins?
SELECT [name]
FROM sys.syslogins
WHERE IS_SRVROLEMEMBER ('sysadmin',name) = 1;


--This is only useful for full Windows versions.
--Cloud DBaaS, Linux, etc -- You'll need something else.
SELECT 
   cpu_count
 , hyperthread_ratio
FROM 
      sys.dm_os_sys_info;


 SELECT DISTINCT 
  vs.volume_mount_point
, vs.file_system_type
, vs.logical_volume_name
, vs.total_bytes/1073741824.0 [Total Size (GB)]
, vs.available_bytes/1073741824.0 [Available Size (GB)] 
, CAST(vs.available_bytes * 100. / vs.total_bytes AS DECIMAL(5,2)) AS [Space Free %] 
FROM 
  sys.master_files AS f WITH (NOLOCK)
    CROSS APPLY 
  sys.dm_os_volume_stats(f.database_id, f.[file_id]) AS vs;




--CPU Utilization
;WITH XML_And_Time AS (
       SELECT 
         DATEADD (ms, r.[timestamp] - sys.ms_ticks, GETDATE()) AS record_time
       , CAST(r.record AS XML) record
       FROM 
         sys.dm_os_ring_buffers r  
           CROSS JOIN 
         sys.dm_os_sys_info sys  
       WHERE   
         ring_buffer_type='RING_BUFFER_SCHEDULER_MONITOR' 
           AND 
         record LIKE '%<SystemHealth>%'
       )
 SELECT 
   100 - record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS WindowsUtilization
 , record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') AS SQLProcessUtilization
 , record_time
 FROM XML_And_Time;

--Memory Effectiveness
SELECT  
  counter_name
, cntr_value NumberOfSeconds --Bigger is better
FROM
  sys.dm_os_performance_counters
WHERE 
  object_name = 'SQLServer:Buffer Node' --Watch for NUMA nodes and named instances
    AND 
  counter_name = 'Page life expectancy';
 


SELECT 
  b.name
, a.database_id
, a.[FILE_ID]
, a.num_of_reads
, a.num_of_bytes_read
, a.io_stall_read_ms
, a.num_of_writes
, a.num_of_bytes_written
, a.io_stall_write_ms
, a.io_stall
, SYSDATETIME() AS ReadingDateAndTime
FROM 
  sys.dm_io_virtual_file_stats(NULL, NULL) a 
    INNER JOIN 
  sys.databases b ON a.database_id = b.database_id;

 
SELECT 
  wait_type 
, waiting_tasks_count
, signal_wait_time_ms
, wait_time_ms
, SYSDATETIME() AS StartTime
FROM 
  sys.dm_os_wait_stats 
WHERE 
  wait_type NOT IN ('SLEEP_TASK','BROKER_EVENTHANDLER','XE_DISPATCHER_WAIT','BROKER_RECEIVE_WAITFOR', 'CLR_AUTO_EVENT', 'CLR_MANUAL_EVENT','REQUEST_FOR_DEADLOCK_SEARCH','SQLTRACE_INCREMENTAL_FLUSH_SLEEP','SQLTRACE_BUFFER_FLUSH','LAZYWRITER_SLEEP','XE_TIMER_EVENT','XE_DISPATCHER_WAIT','FT_IFTS_SCHEDULER_IDLE_WAIT','LOGMGR_QUEUE','CHECKPOINT_QUEUE', 'BROKER_TO_FLUSH', 'BROKER_TASK_STOP', 'BROKER_EVENTHANDLER', 'SLEEP_TASK', 'WAITFOR', 'DBMIRROR_DBM_MUTEX', 'DBMIRROR_EVENTS_QUEUE', 'DBMIRRORING_CMD', 'DISPATCHER_QUEUE_SEMAPHORE','BROKER_RECEIVE_WAITFOR', 'CLR_AUTO_EVENT', 'DIRTY_PAGE_POLL', 'HADR_FILESTREAM_IOMGR_IOCOMPLETION', 'ONDEMAND_TASK_QUEUE', 'FT_IFTSHC_MUTEX', 'CLR_MANUAL_EVENT', 'SP_SERVER_DIAGNOSTICS_SLEEP', 'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP', 'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP','CLR_SEMAPHORE','DBMIRROR_WORKER_QUEUE','SP_SERVER_DIAGNOSTICS_SLEEP','HADR_CLUSAPI_CALL','HADR_LOGCAPTURE_WAIT','HADR_NOTIFICATION_DEQUEUE','HADR_TIMER_TASK','HADR_WORK_QUEUE','REDO_THREAD_PENDING_WORK','UCS_SESSION_REGISTRATION','BROKER_TRANSMITTER','SLEEP_SYSTEMTASK','QDS_SHUTDOWN_QUEUE')
ORDER BY wait_time_ms DESC;






--Why not run a query like this instead?
USE msdb
GO
SELECT sj.[name] JobName, sjh.step_name, message, dbo.agent_datetime(sjh.run_date, sjh.run_time) JobRunTime, sjh.run_duration
FROM dbo.sysjobs sj
  INNER JOIN dbo.sysjobhistory sjh ON sj.job_id = sjh.job_id
WHERE run_status <> 1
  AND dbo.agent_datetime(sjh.run_date, sjh.run_time) > DATEADD(dd, -4, SYSDATETIME());



USE master;
GO

SET NOCOUNT ON
DECLARE @crdate DATETIME, @hr VARCHAR(50), @min VARCHAR(5)
SELECT @crdate=crdate FROM sysdatabases WHERE NAME='tempdb'
SELECT @hr=(DATEDIFF ( mi, @crdate,GETDATE()))/60
IF ((DATEDIFF ( mi, @crdate,GETDATE()))/60)=0
SELECT @min=(DATEDIFF ( mi, @crdate,GETDATE()))
ELSE
SELECT @min=(DATEDIFF ( mi, @crdate,GETDATE()))-((DATEDIFF( mi, @crdate,GETDATE()))/60)*60
PRINT 'SQL Server "' + CONVERT(VARCHAR(30),SERVERPROPERTY('SERVERNAME'))+'" is Online for the past '+@hr+' hours & '+@min+' minutes'
IF NOT EXISTS (SELECT 1 FROM master.dbo.sysprocesses WHERE program_name = N'SQLAgent - Generic Refresher')
BEGIN
PRINT 'SQL Server is running but SQL Server Agent <<NOT>> running'
END
ELSE BEGIN
PRINT 'SQL Server and SQL Server Agent both are running'
END
PRINT 'Last checked ' + CONVERT(VARCHAR(50),Getdate())

--CHeck SQL Server Instance Uptime
-- This query retrieves the SQL Server instance uptime by checking the login time of the system process with SPID 1.
use master
go
SELECT @@SERVERNAME AS [Server Name], login_time as [SQL Server Instance Uptime] FROM sys.sysprocesses where spid=1;


use master
go
SELECT @@SERVERNAME AS [Server Name]
, login_time as [SQL Server Instance Uptime]
, DATEDIFF(HOUR, login_time, GETDATE()) AS [Uptime Hours]
, DATEDIFF(MINUTE, login_time, GETDATE()) % 60 AS [Uptime Minutes]
FROM sys.sysprocesses where spid=1;